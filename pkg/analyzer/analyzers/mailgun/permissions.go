// Code generated by go generate; DO NOT EDIT.
package mailgun

import "errors"

type Permission int

const (
    Invalid Permission = iota
    DomainsRead Permission = iota
    DomainsWrite Permission = iota
    MessagesRead Permission = iota
    MessagesWrite Permission = iota
    WebhooksRead Permission = iota
    WebhooksWrite Permission = iota
    EventsRead Permission = iota
    EventsWrite Permission = iota
    TagsRead Permission = iota
    TagsWrite Permission = iota
    StatsRead Permission = iota
    StatsWrite Permission = iota
    UnsubscribesRead Permission = iota
    UnsubscribesWrite Permission = iota
    ComplaintsRead Permission = iota
    ComplaintsWrite Permission = iota
    BouncesRead Permission = iota
    BouncesWrite Permission = iota
    WhitelistRead Permission = iota
    WhitelistWrite Permission = iota
    RoutesRead Permission = iota
    RoutesWrite Permission = iota
    MailingListsRead Permission = iota
    MailingListsWrite Permission = iota
    TemplatesRead Permission = iota
    TemplatesWrite Permission = iota
    IpsRead Permission = iota
    IpsWrite Permission = iota
    IpPoolsRead Permission = iota
    IpPoolsWrite Permission = iota
    SubAccountsRead Permission = iota
    SubAccountsWrite Permission = iota
    SecureTrackingRead Permission = iota
    SecureTrackingWrite Permission = iota
)

var (
    PermissionStrings = map[Permission]string{
        DomainsRead: "domains:read",
        DomainsWrite: "domains:write",
        MessagesRead: "messages:read",
        MessagesWrite: "messages:write",
        WebhooksRead: "webhooks:read",
        WebhooksWrite: "webhooks:write",
        EventsRead: "events:read",
        EventsWrite: "events:write",
        TagsRead: "tags:read",
        TagsWrite: "tags:write",
        StatsRead: "stats:read",
        StatsWrite: "stats:write",
        UnsubscribesRead: "unsubscribes:read",
        UnsubscribesWrite: "unsubscribes:write",
        ComplaintsRead: "complaints:read",
        ComplaintsWrite: "complaints:write",
        BouncesRead: "bounces:read",
        BouncesWrite: "bounces:write",
        WhitelistRead: "whitelist:read",
        WhitelistWrite: "whitelist:write",
        RoutesRead: "routes:read",
        RoutesWrite: "routes:write",
        MailingListsRead: "mailing_lists:read",
        MailingListsWrite: "mailing_lists:write",
        TemplatesRead: "templates:read",
        TemplatesWrite: "templates:write",
        IpsRead: "ips:read",
        IpsWrite: "ips:write",
        IpPoolsRead: "ip_pools:read",
        IpPoolsWrite: "ip_pools:write",
        SubAccountsRead: "sub_accounts:read",
        SubAccountsWrite: "sub_accounts:write",
        SecureTrackingRead: "secure_tracking:read",
        SecureTrackingWrite: "secure_tracking:write",
    }

    StringToPermission = map[string]Permission{
        "domains:read": DomainsRead,
        "domains:write": DomainsWrite,
        "messages:read": MessagesRead,
        "messages:write": MessagesWrite,
        "webhooks:read": WebhooksRead,
        "webhooks:write": WebhooksWrite,
        "events:read": EventsRead,
        "events:write": EventsWrite,
        "tags:read": TagsRead,
        "tags:write": TagsWrite,
        "stats:read": StatsRead,
        "stats:write": StatsWrite,
        "unsubscribes:read": UnsubscribesRead,
        "unsubscribes:write": UnsubscribesWrite,
        "complaints:read": ComplaintsRead,
        "complaints:write": ComplaintsWrite,
        "bounces:read": BouncesRead,
        "bounces:write": BouncesWrite,
        "whitelist:read": WhitelistRead,
        "whitelist:write": WhitelistWrite,
        "routes:read": RoutesRead,
        "routes:write": RoutesWrite,
        "mailing_lists:read": MailingListsRead,
        "mailing_lists:write": MailingListsWrite,
        "templates:read": TemplatesRead,
        "templates:write": TemplatesWrite,
        "ips:read": IpsRead,
        "ips:write": IpsWrite,
        "ip_pools:read": IpPoolsRead,
        "ip_pools:write": IpPoolsWrite,
        "sub_accounts:read": SubAccountsRead,
        "sub_accounts:write": SubAccountsWrite,
        "secure_tracking:read": SecureTrackingRead,
        "secure_tracking:write": SecureTrackingWrite,
    }

    PermissionIDs = map[Permission]int{
        DomainsRead: 1,
        DomainsWrite: 2,
        MessagesRead: 3,
        MessagesWrite: 4,
        WebhooksRead: 5,
        WebhooksWrite: 6,
        EventsRead: 7,
        EventsWrite: 8,
        TagsRead: 9,
        TagsWrite: 10,
        StatsRead: 11,
        StatsWrite: 12,
        UnsubscribesRead: 13,
        UnsubscribesWrite: 14,
        ComplaintsRead: 15,
        ComplaintsWrite: 16,
        BouncesRead: 17,
        BouncesWrite: 18,
        WhitelistRead: 19,
        WhitelistWrite: 20,
        RoutesRead: 21,
        RoutesWrite: 22,
        MailingListsRead: 23,
        MailingListsWrite: 24,
        TemplatesRead: 25,
        TemplatesWrite: 26,
        IpsRead: 27,
        IpsWrite: 28,
        IpPoolsRead: 29,
        IpPoolsWrite: 30,
        SubAccountsRead: 31,
        SubAccountsWrite: 32,
        SecureTrackingRead: 33,
        SecureTrackingWrite: 34,
    }

    IdToPermission = map[int]Permission{
        1: DomainsRead,
        2: DomainsWrite,
        3: MessagesRead,
        4: MessagesWrite,
        5: WebhooksRead,
        6: WebhooksWrite,
        7: EventsRead,
        8: EventsWrite,
        9: TagsRead,
        10: TagsWrite,
        11: StatsRead,
        12: StatsWrite,
        13: UnsubscribesRead,
        14: UnsubscribesWrite,
        15: ComplaintsRead,
        16: ComplaintsWrite,
        17: BouncesRead,
        18: BouncesWrite,
        19: WhitelistRead,
        20: WhitelistWrite,
        21: RoutesRead,
        22: RoutesWrite,
        23: MailingListsRead,
        24: MailingListsWrite,
        25: TemplatesRead,
        26: TemplatesWrite,
        27: IpsRead,
        28: IpsWrite,
        29: IpPoolsRead,
        30: IpPoolsWrite,
        31: SubAccountsRead,
        32: SubAccountsWrite,
        33: SecureTrackingRead,
        34: SecureTrackingWrite,
    }
)

// ToString converts a Permission enum to its string representation
func (p Permission) ToString() (string, error) {
    if str, ok := PermissionStrings[p]; ok {
        return str, nil
    }
    return "", errors.New("invalid permission")
}

// ToID converts a Permission enum to its ID
func (p Permission) ToID() (int, error) {
    if id, ok := PermissionIDs[p]; ok {
        return id, nil
    }
    return 0, errors.New("invalid permission")
}

// PermissionFromString converts a string representation to its Permission enum
func PermissionFromString(s string) (Permission, error) {
    if p, ok := StringToPermission[s]; ok {
        return p, nil
    }
    return 0, errors.New("invalid permission string")
}

// PermissionFromID converts an ID to its Permission enum
func PermissionFromID(id int) (Permission, error) {
    if p, ok := IdToPermission[id]; ok {
        return p, nil
    }
    return 0, errors.New("invalid permission ID")
}
