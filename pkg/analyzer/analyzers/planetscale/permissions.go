// Code generated by go generate; DO NOT EDIT.
package planetscale

import "errors"

type Permission int

const (
    Invalid Permission = iota
    ReadOrganization Permission = iota
    ReadInvoices Permission = iota
    ReadDatabases Permission = iota
    ReadAuditLogs Permission = iota
    CreateDatabases Permission = iota
    ReadOauthApplications Permission = iota
    WriteOauthTokens Permission = iota
    ReadOauthTokens Permission = iota
)

var (
    PermissionStrings = map[Permission]string{
        ReadOrganization: "read_organization",
        ReadInvoices: "read_invoices",
        ReadDatabases: "read_databases",
        ReadAuditLogs: "read_audit_logs",
        CreateDatabases: "create_databases",
        ReadOauthApplications: "read_oauth_applications",
        WriteOauthTokens: "write_oauth_tokens",
        ReadOauthTokens: "read_oauth_tokens",
    }

    StringToPermission = map[string]Permission{
        "read_organization": ReadOrganization,
        "read_invoices": ReadInvoices,
        "read_databases": ReadDatabases,
        "read_audit_logs": ReadAuditLogs,
        "create_databases": CreateDatabases,
        "read_oauth_applications": ReadOauthApplications,
        "write_oauth_tokens": WriteOauthTokens,
        "read_oauth_tokens": ReadOauthTokens,
    }

    PermissionIDs = map[Permission]int{
        ReadOrganization: 1,
        ReadInvoices: 2,
        ReadDatabases: 3,
        ReadAuditLogs: 4,
        CreateDatabases: 5,
        ReadOauthApplications: 6,
        WriteOauthTokens: 7,
        ReadOauthTokens: 8,
    }

    IdToPermission = map[int]Permission{
        1: ReadOrganization,
        2: ReadInvoices,
        3: ReadDatabases,
        4: ReadAuditLogs,
        5: CreateDatabases,
        6: ReadOauthApplications,
        7: WriteOauthTokens,
        8: ReadOauthTokens,
    }
)

// ToString converts a Permission enum to its string representation
func (p Permission) ToString() (string, error) {
    if str, ok := PermissionStrings[p]; ok {
        return str, nil
    }
    return "", errors.New("invalid permission")
}

// ToID converts a Permission enum to its ID
func (p Permission) ToID() (int, error) {
    if id, ok := PermissionIDs[p]; ok {
        return id, nil
    }
    return 0, errors.New("invalid permission")
}

// PermissionFromString converts a string representation to its Permission enum
func PermissionFromString(s string) (Permission, error) {
    if p, ok := StringToPermission[s]; ok {
        return p, nil
    }
    return 0, errors.New("invalid permission string")
}

// PermissionFromID converts an ID to its Permission enum
func PermissionFromID(id int) (Permission, error) {
    if p, ok := IdToPermission[id]; ok {
        return p, nil
    }
    return 0, errors.New("invalid permission ID")
}
